architecture est forme en considerant :
functional requirements, captured in the Use-Case Model
non-functionalrequirements, captured in the Supplementary Specifications
+f(environnement de travail du sofwtare[Ouverture sur un systm existant 
par exemple ..]+ groupe of princples and politics
-----------
This section of the Software Architecture document is the place to describe
 these goals and constraints
c/s => deux types client 
mvc => motif de l'architecture[separer les responsabilitees entre le  3  module : MVC
+ MVC supports rapid and parallel development. +  
organiser et faciliter le debugage du code ]
hibernate ORM + JPA java persistance


Ce qui est intéressant dans notre choix ,
 c’est que les employés pour l’instant ne sont pas de grande échelle [cent employés aux max].
 alors l’architecture client serveur centralisé qui ne demande pas de grand budget à part les frais de développement/maintenance +
 hébergement ca sera le meilleur choix , de plus on a choisi les base de données sql , et on va travailler normalement avec MySQL ,
 on a encore le facteur de performance/temps de réponse.
et si on a besoin de monter en échelle , on va changer vers une architecture décentralisée et ce changement ne présente pas un risque
 dangereux dans notre projet.


==========
Risks:
==l'architecture inadapté
Choisir  minutieusement  au début l'architecture qui correspond notre projet

==logiciel en panne
Maintenir le logiciel  pour éviter les défaillances s et et sauvegarder les donnees d une manière securise

==Blocage dans une fonctionnalité complexe
-appel à un expert 
- Planifier des formations pour l’ensemble de l'équipe dev

==dégradation de service à cause de nombre élevé des utilisateur/dat
a
pb de scalabilité : 
changer vers une architecture décentralisée -ajouter des serveurs- pour y 
remédier aux faiblesses de l’architecture centralisée c/s.




REST APIs is that they provide a great deal of flexibility. Data is not tied to resources or methods, so REST can handle multiple types of calls, return different data formats 

De plus, on opte sur une application mobile native pour la rapidité des opérations et la performance offerte .

The client-server architecture is most useful for applications that require a separation or abstraction of concerns between the client and the server; it is meant for systems with high interoperability. The client-server architectural style helps applications improve performance in scalability.

